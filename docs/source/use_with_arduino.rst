.. note::

    こんにちは、SunFounderのRaspberry Pi & Arduino & ESP32愛好家コミュニティへようこそ！Facebook上でRaspberry Pi、Arduino、ESP32についてもっと深く掘り下げ、他の愛好家と交流しましょう。

    **参加する理由は？**

    - **エキスパートサポート**：コミュニティやチームの助けを借りて、販売後の問題や技術的な課題を解決します。
    - **学び＆共有**：ヒントやチュートリアルを交換してスキルを向上させましょう。
    - **独占的なプレビュー**：新製品の発表や先行プレビューに早期アクセスしましょう。
    - **特別割引**：最新製品の独占割引をお楽しみください。
    - **祭りのプロモーションとギフト**：ギフトや祝日のプロモーションに参加しましょう。

    👉 私たちと一緒に探索し、創造する準備はできていますか？[|link_sf_facebook|]をクリックして今すぐ参加しましょう！

Arduinoボードでの使用
===================================

PiPower 3を使用してArduinoボードに電力を供給する場合、ArduinoをPiPower 3のType A出力ポートに接続するか、ジャンパーワイヤーを2本使用して接続します。ボードのI2Cインターフェースをジャンパーで接続します。電源オフ前に操作が必要ない場合、 **SDSIG** ジャンパーキャップをGNDに直接接続します。シャットダウン前に操作が必要な場合は、ジャンパーキャップを取り外し、中間ワイヤーをArduinoのIOポートに接続してPiPower 3に安全に電源を切ることを通知します。

入力および出力電圧、バッテリー電圧とパーセンテージ、電源、充電状態、およびその他の内部データを監視するためのライブラリを提供しています。

#. Arduino IDEで、 **Library Manager** を開き、 ``SunFounderPowerControl`` を検索してダウンロードおよびインストールします。

    .. image:: img/arduino_library.png

#. インストール後、 **File** -> **Examples** -> **SunFounderPowerControl** -> **PiPower 3** に移動すると、4つの例が表示されます。

    .. image:: img/arduino_examples.png

    * ``read_all``: すべてのデータを一度に読み取り、それぞれを個別に処理する必要がある場合にこの例を使用します。
    * ``read_individual``: 特定のデータのみを読み取る必要がある場合、この例は個々のデータ取得手順を提供します。
    * ``set_shutdown_percentage``: シャットダウンバッテリーパーセンテージを設定する方法を示します。この機能は、バッテリーが充電されておらず、設定されたパーセンテージを下回った場合にホストにシャットダウン信号を送信します。ホストがシャットダウンした後、電源オフ信号を受信した後にのみ電源が切れます。通常、Raspberry PiのようなSBCに使用されます。マイクロコントローラーの場合、この機能を使用するには、 **SDSIG** ジャンパーキャップを取り外し、中間ワイヤーをピンに接続します。シャットダウン信号を受信して安全にシャットダウンした後、このピンを高くしてPiPower 3の電源を切ります。
    * ``shutdown_when_request``: シャットダウン信号を受信した後の操作を処理する方法を示します。 **SDSIG** ジャンパーキャップを取り外し、中間ワイヤーをピンに接続します。

#. これらの例のいずれかを選択してボードにアップロードします。

.. note::

    I2Cピンを変更できるボードでは、 ``Wire.begin()`` のコードを変更する必要があります。

ArduinoライブラリAPIドキュメント:

https://github.com/sunfounder/arduino_spc?tab=readme-ov-file#api
